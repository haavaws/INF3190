Compilation:
To compile the program, put all source files in a single directoy.

Source files:
client.c server.c mip.c debug.c socekts.c mip_daemon.c routing.c routing_daemon.c
routing_daemon.h mip_daemon.h

After that, open a terminal, navigate to said directory, and simply use the
make
command.

Usage for the different programs:
Client:
./client [-h] <destination_host> <message> <Socket_application>

Server:
./server [-h] <Socket_application>

MIP daemon:
./mip_daemon [-h][-d] <Socket_application> <Socket_route> <Socket_forwarding> [MIP addresses ...]

Routing daemon:
./routing_daemon [-h] [-d] <Socket_route> <Socket_forwarding>

The makefile includes some premade commands for setting up the topology as the example given in the assignment.

With a topology set up like in the example in the assignment, using the
run_mip_{letter}
run_route_{letter}
run_serv_{letter}
commands allow you to bind the MIP addresses seen in the example to the right nodes,
if the command is run on the host corresponding to the letter.

Using the
run_ping_a_e
command after setting up the topology (not including a server on host A), will
make host A attempt to ping host E.

All sockets used by these commands are on this form:
<Socket_application>: App{LETTER}
<Socket_route>:       Route{LETTER}
<Socket_forwarding>:  Fwd{LETTER}

This means the commands in the Makefile can be mixed with manual execution, if
these sockets are used.

Stopping execution:
To exit the application, exiting from the MIP daemon will make any connected
application or routing daemon shut down properly.

The server can be shut down with Ctrl-C and Ctrl-\, while the
routing daemon and the MIP daemon may be shut down Ctrl-C, Ctrl-D and Ctrl-\.
